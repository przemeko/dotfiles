function csvpreview(){
      sed 's/,,/, ,/g;s/,,/, ,/g' "$@" | column -s, -t | less -#2 -N -S
}

# whois a domain or a URL
function whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ] ; then
		domain=$1
	fi
	echo "Getting whois record for: $domain â€¦"

	# this is the best whois server
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

# find shorthand
function f() {
	find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# usage: countcharacters "count me"
function countcharacters() {
    echo -n "$1" | wc -m
}


# git commit browser
# needs fzf and ctrl-m to view commit.
function gitcommitsbrowser() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
      --bind "ctrl-m:execute:
                echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R'"
}


# sort branches by modification date
# function gitsortbranches() {
#     for branch in `git branch -l | grep -v HEAD`;do echo -e `git show --format="%ci %cr" $branch | head -n 1` \\t$branch; done | sort -r
# }


#  Git branches, ordered by most recent commit
# https://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
function gitsortbranches() {
    git for-each-ref --sort=-committerdate refs/heads --format='%(authordate:short) %(color:red)%(objectname:short) %(color:yellow)%(refname:short)%(color:reset) (%(color:green)%(committerdate:relative)%(color:reset)) %(authorname)'
}

# git ahead/behind info between main and current branch
# https://stackoverflow.com/questions/20433867/git-ahead-behind-info-between-master-and-branch
function gitbehindahead() {
    local CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    echo "origin/main...$CURRENT_BRANCH"
    git fetch -q  # make sure we up to date
    git rev-list --left-right --count origin/main...HEAD | awk '{print "\033[31m"$1" commits behind\033[0m\n" "\033[34m"$2 " commits ahead\033[0m"}'
    git rev-list --left-right --pretty=oneline origin/main...HEAD | awk '{if (substr($1,1,1) == "<") print "\033[31m"$0"\033[0m"; else print "\033[34m"$0"\033[0m";}'
}

# git amend
function gitammendandpush {
    branch_name=$(git rev-parse --abbrev-ref HEAD)
    if [ "$branch_name" = "main" ] || [ "$branch_name" = "master" ]; then
          echo "Your are on the main branch. Aborting."
          exit 1
    else
        echo ""
    fi

    commits_log=$(git log  --abbrev-commit  main..HEAD)
    if [ -z "$commits_log" ];
    then
        echo "Found no commits. Aborting amend command"
        exit 1
    else
        git add .
        git commit --amend --no-edit
        git push --force
    fi
}

# Get network info. Ip, mac addresses etc
# works on osx
# based on: https://apple.stackexchange.com/questions/191879/how-to-find-the-currently-connected-network-service-from-the-command-line

getnetworkinfo() {
    YELLOW='\033[0;33m'
    NC='\033[0m' # No Color

    while read -r line; do
        sname=$(echo "$line" | awk -F  "(, )|(: )|[)]" '{print $2}')
        sdev=$(echo "$line" | awk -F  "(, )|(: )|[)]" '{print $4}')
        # echo "Current service: $sname, $sdev, $currentservice"
        if [ -n "$sdev" ]; then
            ifout="$(ifconfig "$sdev" 2>/dev/null)"
            echo "$ifout" | grep 'status: active' > /dev/null 2>&1
            rc="$?"
            if [ "$rc" -eq 0 ]; then
                currentservice="$sname"
                currentdevice="$sdev"
                currentmac=$(echo "$ifout" | awk '/ether/{print $2}')
                currentip=$(echo "$ifout" | awk '/inet /{print $2}')

                # may have multiple active devices, so echo it here
                echo -e "ip: ${YELLOW}$currentip${NC}\nservice: $currentservice\ndevice: $currentdevice\nmac: $currentmac"
                echo "For more details run: 'ifconfig $currentdevice'"
                echo -e "\n"
            fi
        fi
    done <<< "$(networksetup -listnetworkserviceorder | grep 'Hardware Port')"

    if [ -z "$currentservice" ]; then
        >&2 echo "Could not find current service"
        exit 1
    fi
}
